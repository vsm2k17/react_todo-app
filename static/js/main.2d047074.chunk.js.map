{"version":3,"sources":["Component/TodoApp/TodoApp.js","Component/TodoItem/TodoItem.js","Component/TodoList/TodoList.js","Component/Nav/Nav.js","App.js","index.js"],"names":["TodoApp","state","text","inputFocus","React","createRef","componentDidMount","current","focus","handleChangeNewTodoText","event","value","target","setState","handleSubmit","this","props","className","onSubmit","ref","placeholder","onChange","onBlur","Component","TodoItem","inputText","todo","handleCheckboxChange","handleDoubleClick","handleEditing","handleClickDestroy","handleLossFocus","elementState","editing","type","defaultValue","onKeyDown","id","checked","completed","onDoubleClick","onClick","TodoList","listOfTodo","length","map","classNames","key","Nav","handleSelectActivePage","activePage","href","cs","selected","App","componentDidUpdate","localStorage","setItem","JSON","stringify","newTodoText","preventDefault","replace","sampleTodo","trim","filter","input","prevValue","handleToggleAll","name","handleClearCompleted","getItem","s","parse","visibleList","every","hidden","htmlFor","reduce","acc","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2d047074.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass TodoApp extends React.Component {\n  state = {\n    text: '',\n  }\n\n  inputFocus = React.createRef();\n\n  componentDidMount = () => {\n    this.inputFocus.current.focus();\n  }\n\n  handleChangeNewTodoText = (event) => {\n    const { value } = event.target;\n\n    this.setState({ text: value });\n  }\n\n  render() {\n    const { handleSubmit } = this.props;\n    const { text } = this.state;\n\n    return (\n      <header className=\"header\">\n        <h1>todos</h1>\n        <form onSubmit={(event) => {\n          handleSubmit(event, text);\n          this.setState({ text: '' });\n        }}\n        >\n          <input\n            className=\"new-todo\"\n            ref={this.inputFocus}\n            placeholder=\"What needs to be done?\"\n            value={text}\n            onChange={this.handleChangeNewTodoText}\n            onBlur={(event) => {\n              handleSubmit(event, text);\n              this.setState({ text: '' });\n            }}\n          />\n        </form>\n      </header>\n    );\n  }\n}\n\nTodoApp.propTypes = {\n  handleSubmit: PropTypes.func.isRequired,\n};\n\nexport default TodoApp;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport class TodoItem extends React.Component {\n  inputText = React.createRef();\n\n  componentDidUpdate() {\n    if (this.inputText.current) {\n      this.inputText.current.focus();\n    }\n  }\n\n  render() {\n    const {\n      todo,\n      handleCheckboxChange,\n      handleDoubleClick,\n      handleEditing,\n      handleClickDestroy,\n      handleLossFocus,\n    } = this.props;\n\n    return (\n      <div>\n        {!todo.elementState.editing\n          ? (\n            <div className=\"View\">\n              <input\n                checked={todo.elementState.completed}\n                onChange={() => handleCheckboxChange(todo.id)}\n                type=\"checkbox\"\n                className=\"toggle\"\n                id={`todo-${todo.id}`}\n              />\n              <label\n                onDoubleClick={() => {\n                  handleDoubleClick(todo.id);\n                }}\n              >\n                {todo.text}\n              </label>\n              <button\n                type=\"button\"\n                className=\"destroy\"\n                onClick={() => handleClickDestroy(todo.id)}\n              />\n            </div>\n          )\n          : (\n            <input\n              type=\"text\"\n              className=\"edit\"\n              defaultValue={todo.text}\n              onKeyDown={event => handleEditing(event, todo.id, todo.text)}\n              onBlur={event => handleLossFocus(event, todo.id)}\n              ref={this.inputText}\n            />\n          )\n        }\n      </div>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number,\n    text: PropTypes.string,\n    elementState: PropTypes.shape({\n      completed: PropTypes.bool,\n      editing: PropTypes.bool,\n    }),\n  }).isRequired,\n  handleCheckboxChange: PropTypes.func.isRequired,\n  handleDoubleClick: PropTypes.func.isRequired,\n  handleEditing: PropTypes.func.isRequired,\n  handleClickDestroy: PropTypes.func.isRequired,\n  handleLossFocus: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport { TodoItem } from '../TodoItem/TodoItem';\n\nconst TodoList = ({\n  listOfTodo,\n  handleCheckboxChange,\n  handleDoubleClick,\n  handleEditing,\n  handleClickDestroy,\n  handleLossFocus,\n}) => (\n  <ul className=\"todo-list\">\n    {listOfTodo.length !== 0\n      ? listOfTodo.map(todo => (\n        <li\n          className={classNames(todo.elementState)}\n          key={todo.id}\n        >\n          <TodoItem\n            todo={todo}\n            handleCheckboxChange={handleCheckboxChange}\n            handleDoubleClick={handleDoubleClick}\n            handleEditing={handleEditing}\n            handleClickDestroy={handleClickDestroy}\n            handleLossFocus={handleLossFocus}\n          />\n        </li>\n      ))\n      : <div />\n    }\n  </ul>\n);\n\nTodoList.propTypes = {\n  listOfTodo: PropTypes.arrayOf(Object).isRequired,\n  handleCheckboxChange: PropTypes.func.isRequired,\n  handleDoubleClick: PropTypes.func.isRequired,\n  handleEditing: PropTypes.func.isRequired,\n  handleClickDestroy: PropTypes.func.isRequired,\n  handleLossFocus: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport cs from 'classnames';\nimport PropTypes from 'prop-types';\n\nclass Nav extends React.Component {\n  state = {};\n\n  render() {\n    const {\n      handleSelectActivePage,\n      activePage,\n    } = this.props;\n\n    return (\n      <ul className=\"filters\">\n        <li>\n          <a\n            onClick={() => handleSelectActivePage('All')}\n            href=\"#/\"\n            className={cs({ selected: activePage === 'All' })}\n          >\n            All\n          </a>\n        </li>\n\n        <li>\n          <a\n            onClick={() => handleSelectActivePage('Active')}\n            href=\"#/active\"\n            className={cs({ selected: activePage === 'Active' })}\n          >\n            Active\n          </a>\n        </li>\n\n        <li>\n          <a\n            onClick={() => handleSelectActivePage('Completed')}\n            href=\"#/completed\"\n            className={cs({ selected: activePage === 'Completed' })}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n    );\n  }\n}\n\nNav.propTypes = {\n  handleSelectActivePage: PropTypes.func.isRequired,\n  activePage: PropTypes.string.isRequired,\n};\n\nexport default Nav;\n","import React from 'react';\nimport TodoApp from './Component/TodoApp/TodoApp';\nimport TodoList from './Component/TodoList/TodoList';\nimport Nav from './Component/Nav/Nav';\n\nclass App extends React.Component {\n  state = {\n    activePage: 'All',\n    id: 0,\n    listOfTodo: [],\n  }\n\n  componentDidMount() {\n    if (localStorage.getItem('list') !== null) {\n      const s = JSON.parse(localStorage.getItem('list'));\n\n      this.setState(s);\n    }\n  }\n\n  componentDidUpdate = () => {\n    localStorage.setItem('list', JSON.stringify(this.state));\n  }\n\n  handleSubmit = (event, newTodoText) => {\n    event.preventDefault();\n\n    if (newTodoText.replace(/ /g, '') === '') {\n      return;\n    }\n\n    const sampleTodo = {\n      id: this.state.id + 1,\n      text: newTodoText.trim(),\n      elementState: {\n        completed: false,\n        editing: false,\n      },\n    };\n\n    this.setState(state => ({\n      listOfTodo: [...state.listOfTodo, sampleTodo],\n      id: state.id + 1,\n    }));\n  }\n\n  handleCheckboxChange = (id) => {\n    this.setState(state => ({ listOfTodo: state.listOfTodo.map((todo) => {\n      if (todo.id !== id) {\n        return todo;\n      }\n\n      return {\n        ...todo,\n        elementState: {\n          ...todo.elementState,\n          completed: !todo.elementState.completed,\n        },\n      };\n    }) }));\n  }\n\n  handleClickDestroy = (id) => {\n    this.setState(state => ({ listOfTodo: state.listOfTodo\n      .filter(todo => todo.id !== id) }));\n  }\n\n  handleDoubleClick = (id, input) => {\n    this.setState(state => ({\n      listOfTodo: state.listOfTodo.map((todo) => {\n        if (todo.id !== id) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          elementState: {\n            ...todo.elementState,\n            editing: true,\n          },\n        };\n      }),\n    }));\n  }\n\n  handleEditing = (event, id, prevValue) => {\n    const { value } = event.target;\n\n    if (event.key === 'Enter') {\n      this.setState(state => ({ listOfTodo: state.listOfTodo.map((todo) => {\n        if (todo.id !== id) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          text: value,\n          elementState: {\n            ...todo.elementState,\n            editing: false,\n          },\n        };\n      }) }));\n    }\n\n    if (event.key === 'Escape') {\n      this.setState(state => ({ listOfTodo: state.listOfTodo.map((todo) => {\n        if (todo.id !== id) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          text: prevValue,\n          elementState: {\n            ...todo.elementState,\n            editing: false,\n          },\n        };\n      }) }));\n    }\n  }\n\n  handleLossFocus = (event, id) => {\n    const { value } = event.target;\n\n    this.setState(state => ({ listOfTodo: state.listOfTodo.map((todo) => {\n      if (todo.id !== id) {\n        return todo;\n      }\n\n      return {\n        ...todo,\n        text: value,\n        elementState: {\n          ...todo.elementState,\n          editing: false,\n        },\n      };\n    }) }));\n  }\n\n  handleToggleAll = (event) => {\n    const { checked } = event.target;\n\n    this.setState(state => ({ listOfTodo: state.listOfTodo.map(todo => ({\n      ...todo,\n      elementState: {\n        ...todo.elementState,\n        completed: checked,\n      },\n    })) }));\n  }\n\n  handleSelectActivePage = (name) => {\n    this.setState({ activePage: name });\n  }\n\n  handleClearCompleted = () => {\n    this.setState(state => ({ listOfTodo: state.listOfTodo\n      .filter(todo => !todo.elementState.completed) }));\n  }\n\n  render() {\n    const { listOfTodo, activePage } = this.state;\n    let visibleList;\n\n    if (activePage === 'All') {\n      visibleList = [...listOfTodo];\n    } else if (activePage === 'Active') {\n      visibleList = [...listOfTodo\n        .filter(todo => todo.elementState.completed === false)];\n    } else {\n      visibleList = [...listOfTodo\n        .filter(todo => todo.elementState.completed === true)];\n    }\n\n    return (\n      <section className=\"todoapp\">\n        <TodoApp\n          handleSubmit={this.handleSubmit}\n        />\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            checked={listOfTodo\n              .every(todo => todo.elementState.completed)}\n            onChange={this.handleToggleAll}\n          />\n          <label\n            hidden={listOfTodo.length === 0}\n            htmlFor=\"toggle-all\"\n          >\n            Mark all as complete\n          </label>\n          <TodoList\n            listOfTodo={visibleList}\n            handleCheckboxChange={this.handleCheckboxChange}\n            handleDoubleClick={this.handleDoubleClick}\n            handleEditing={this.handleEditing}\n            handleClickDestroy={this.handleClickDestroy}\n            handleLossFocus={this.handleLossFocus}\n          />\n        </section>\n\n        <footer hidden={listOfTodo.length === 0} className=\"footer\">\n          <span className=\"todo-count\">\n            {listOfTodo.reduce((acc, todo) => {\n              if (todo.elementState.completed) {\n                return acc - 1;\n              }\n\n              return acc;\n            }, listOfTodo.length)\n            }\n            {' items left'}\n          </span>\n          <Nav\n            handleSelectActivePage={this.handleSelectActivePage}\n            activePage={activePage}\n          />\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={this.handleClearCompleted}\n          >\n            Clear completed\n          </button>\n        </footer>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}