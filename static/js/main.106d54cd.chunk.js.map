{"version":3,"sources":["Component/TodoApp/TodoApp.js","Component/TodoItem/TodoItem.js","Component/TodoList/TodoList.js","Component/Nav/Nav.js","App.js","index.js"],"names":["TodoApp","state","text","handleChangeNewTodoText","event","value","target","setState","handleSubmit","this","props","className","onSubmit","placeholder","onChange","onBlur","React","Component","TodoItem","todo","handleCheckboxChange","handleDoubleClick","handleEditing","handleClickDestroy","handleLossFocus","defaultChecked","checked","elementState","editing","completed","onClick","id","type","onDoubleClick","defaultValue","onKeyDown","TodoList","ListofTodo","length","map","classNames","key","Nav","handleSelectComplited","handleSelectAll","handleSelectActive","activePage","href","cs","selected","App","newTodoText","preventDefault","sample","concat","filter","handleToggleAll","hanleClearComplited","visibleList","every","hidden","htmlFor","reduce","acc","ReactDOM","render","document","getElementById"],"mappings":"wSAkDeA,E,4MA9CbC,MAAQ,CACNC,KAAM,I,EAGRC,wBAA0B,SAACC,GAAW,IAC5BC,EAAUD,EAAME,OAAhBD,MAER,EAAKE,SAAS,CAAEL,KAAMG,K,uDAGd,IAAD,OACCG,EAAiBC,KAAKC,MAAtBF,aACAN,EAASO,KAAKR,MAAdC,KAER,OACE,4BAAQS,UAAU,UAChB,qCACA,0BAAMC,SAAU,SAACR,GACfI,EAAaJ,EAAOF,GAEpB,EAAKK,SAAS,CAAEL,KAAM,OAItB,2BACES,UAAU,WACVE,YAAY,yBACZR,MAAOH,EACPY,SAAUL,KAAKN,wBACfY,OAAQ,SAACX,GACPI,EAAaJ,EAAOF,GAEpB,EAAKK,SAAS,CAAEL,KAAM,c,GAjCdc,IAAMC,W,gBCmEbC,E,4MAlEbjB,MAAQ,G,uDAEE,IAAD,EAQHQ,KAAKC,MANPS,EAFK,EAELA,KACAC,EAHK,EAGLA,qBACAC,EAJK,EAILA,kBACAC,EALK,EAKLA,cACAC,EANK,EAMLA,mBACAC,EAPK,EAOLA,gBAGF,OACE,oCACE,yBAAKb,UAAU,QACb,2BACEc,gBAAgB,EAChBC,QAASP,EAAKQ,aAAaC,SACtBT,EAAKQ,aAAaC,QACnBT,EAAKQ,aAAaE,UAEtBC,QAAS,kBAAMV,EAAqBD,EAAKY,KACzCC,KAAK,WACLrB,UAAU,SACVoB,GAAE,eAAUZ,EAAKY,MAEnB,2BACEE,cAAe,kBAAMZ,EAAkBF,EAAKY,MAE3CZ,EAAKQ,aAAaC,QAAU,GAAKT,EAAKjB,MAEzC,4BACE8B,KAAK,SACLrB,UAAU,UACVmB,QAAS,kBAAMP,EAAmBJ,EAAKY,QAG3C,2BACEC,KAAK,OACLrB,UAAU,OACVuB,aAAcf,EAAKjB,KACnBiC,UAAW,SAAA/B,GAAK,OAAIkB,EAAclB,EAAOe,EAAKY,KAC9ChB,OAAQ,SAAAX,GAAK,OAAIoB,EAAgBpB,EAAOe,EAAKY,Y,GA3ChCf,IAAMC,WCkDdmB,E,4MA9CbnC,MAAQ,G,uDAEE,IAAD,EAQHQ,KAAKC,MANP2B,EAFK,EAELA,WACAjB,EAHK,EAGLA,qBACAC,EAJK,EAILA,kBACAC,EALK,EAKLA,cACAC,EANK,EAMLA,mBACAC,EAPK,EAOLA,gBAGF,OACE,wBAAIb,UAAU,aACW,IAAtB0B,EAAWC,OACRD,EAAWE,KAAI,SAAApB,GAAI,OACnB,wBACER,UAAW6B,IAAWrB,EAAKQ,cAC3Bc,IAAKtB,EAAOA,EAAKY,GAAK,MAEtB,kBAAC,EAAD,CACEZ,KAAMA,EACNC,qBAAsBA,EACtBC,kBAAmBA,EACnBC,cAAeA,EACfC,mBAAoBA,EACpBC,gBAAiBA,QAIrB,mC,GA/BWR,IAAMC,WCsDdyB,E,4MAvDbzC,MAAQ,G,uDAEE,IAAD,EAMHQ,KAAKC,MAJPiC,EAFK,EAELA,sBACAC,EAHK,EAGLA,gBACAC,EAJK,EAILA,mBACAC,EALK,EAKLA,WAGF,OACE,wBAAInC,UAAU,WACZ,4BACE,uBACEoC,KAAK,KACLpC,UAAWqC,IAAG,CAAEC,SAAyB,QAAfH,IAE1BhB,QAAS,kBAAMc,MAJjB,QAUF,4BACE,uBACEd,QAAS,kBAAMe,KACfE,KAAK,WACLpC,UAAWqC,IAAG,CAAEC,SAAyB,WAAfH,KAH5B,WAUF,4BACE,uBACEhB,QAAS,kBAAMa,KACfI,KAAK,cACLpC,UAAWqC,IAAG,CAAEC,SAAyB,cAAfH,KAH5B,mB,GApCQ9B,IAAMC,WC+NTiC,E,4MA7NbjD,MAAQ,CACN6C,WAAY,MACZf,GAAI,EACJM,WAAY,I,EAGd7B,aAAe,SAACJ,EAAO+C,GAGrB,GAFA/C,EAAMgD,iBAEc,KAAhBD,EAAJ,CAIA,IAAME,EAAS,CACbtB,GAAI,EAAK9B,MAAM8B,GAAK,EACpB7B,KAAMiD,EACNxB,aAAc,CACZE,WAAW,EACXD,SAAS,IAIb,EAAKrB,UAAS,SAAAN,GAAK,MAAK,CACtBoC,WAAYpC,EAAMoC,WAAWiB,OAAO,CAAC,eAAKD,KAC1CtB,GAAI9B,EAAM8B,GAAK,Q,EAInBX,qBAAuB,SAACW,GACtB,EAAKxB,UAAS,SAAAN,GAAK,MAAK,CAAEoC,WAAYpC,EAAMoC,WAAWE,KAAI,SAACpB,GAC1D,OAAIA,EAAKY,KAAOA,EACPZ,EAGF,2BACFA,GADL,IAEEQ,aAAa,2BACRR,EAAKQ,cADE,IAEVE,WAAYV,EAAKQ,aAAaE,sB,EAMtCN,mBAAqB,SAACQ,GACpB,EAAKxB,UAAS,SAAAN,GAAK,MAAK,CAAEoC,WAAYpC,EAAMoC,WACzCkB,QAAO,SAAApC,GAAI,OAAIA,EAAKY,KAAOA,U,EAGhCV,kBAAoB,SAACU,GACnB,EAAKxB,UAAS,SAAAN,GAAK,MAAK,CACtBoC,WAAYpC,EAAMoC,WAAWE,KAAI,SAACpB,GAChC,OAAIA,EAAKY,KAAOA,EACPZ,EAGF,2BACFA,GADL,IAEEQ,aAAa,2BACRR,EAAKQ,cADE,IAEVC,SAAS,c,EAOnBN,cAAgB,SAAClB,EAAO2B,GAAQ,IACtB1B,EAAUD,EAAME,OAAhBD,MAEU,UAAdD,EAAMqC,KACR,EAAKlC,UAAS,SAAAN,GAAK,MAAK,CAAEoC,WAAYpC,EAAMoC,WAAWE,KAAI,SAACpB,GAC1D,OAAIA,EAAKY,KAAOA,EACPZ,EAGF,2BACFA,GADL,IAEEjB,KAAMG,EACNsB,aAAa,2BACRR,EAAKQ,cADE,IAEVC,SAAS,c,EAOnBJ,gBAAkB,SAACpB,EAAO2B,GAAQ,IACxB1B,EAAUD,EAAME,OAAhBD,MAER,EAAKE,UAAS,SAAAN,GAAK,MAAK,CAAEoC,WAAYpC,EAAMoC,WAAWE,KAAI,SAACpB,GAC1D,OAAIA,EAAKY,KAAOA,EACPZ,EAGF,2BACFA,GADL,IAEEjB,KAAMG,EACNsB,aAAa,2BACRR,EAAKQ,cADE,IAEVC,SAAS,c,EAMjB4B,gBAAkB,SAACpD,GACGA,EAAME,OAAlBoB,QAGN,EAAKnB,UAAS,SAAAN,GAAK,MAAK,CAAEoC,WAAYpC,EAAMoC,WAAWE,KAAI,SAAApB,GAAI,kCAC1DA,GAD0D,IAE7DQ,aAAa,2BACRR,EAAKQ,cADE,IAEVE,WAAW,aAIf,EAAKtB,UAAS,SAAAN,GAAK,MAAK,CAAEoC,WAAYpC,EAAMoC,WAAWE,KAAI,SAAApB,GAAI,kCAC1DA,GAD0D,IAE7DQ,aAAa,2BACRR,EAAKQ,cADE,IAEVE,WAAW,c,EAMnBe,gBAAkB,WAChB,EAAKrC,SAAS,CAAEuC,WAAY,S,EAG9BD,mBAAqB,WACnB,EAAKtC,SAAS,CAAEuC,WAAY,Y,EAG9BH,sBAAwB,WACtB,EAAKpC,SAAS,CAAEuC,WAAY,e,EAG9BW,oBAAsB,WACpB,EAAKlD,UAAS,SAAAN,GAAK,MAAK,CAAEoC,WAAYpC,EAAMoC,WACzCkB,QAAO,SAAApC,GAAI,OAAoC,IAAhCA,EAAKQ,aAAaE,kB,uDAG5B,IAEJ6B,EAFG,EAC4BjD,KAAKR,MAAhCoC,EADD,EACCA,WAAYS,EADb,EACaA,WAapB,OATEY,EADiB,QAAfZ,EACS,YAAOT,GACM,WAAfS,EACE,YAAOT,EACfkB,QAAO,SAAApC,GAAI,OAAoC,IAAhCA,EAAKQ,aAAaE,cAEzB,YAAOQ,EACfkB,QAAO,SAAApC,GAAI,OAAoC,IAAhCA,EAAKQ,aAAaE,cAIpC,6BAASlB,UAAU,WACjB,kBAAC,EAAD,CACEH,aAAcC,KAAKD,eAErB,6BAASG,UAAU,QACjB,2BACEqB,KAAK,WACLD,GAAG,aACHpB,UAAU,aACVe,QAASW,EACNsB,OAAM,SAAAxC,GAAI,OAAoC,IAAhCA,EAAKQ,aAAaE,aACnCC,QAASrB,KAAK+C,kBAEhB,2BACEI,OAA8B,IAAtBvB,EAAWC,OACnBuB,QAAQ,cAFV,wBAMA,kBAAC,EAAD,CACExB,WAAYqB,EACZtC,qBAAsBX,KAAKW,qBAC3BC,kBAAmBZ,KAAKY,kBACxBC,cAAeb,KAAKa,cACpBC,mBAAoBd,KAAKc,mBACzBC,gBAAiBf,KAAKe,mBAI1B,4BAAQb,UAAU,UAChB,0BAAMA,UAAU,cACb0B,EAAWyB,QAAO,SAACC,EAAK5C,GACvB,OAAIA,EAAKQ,aAAaE,UACbkC,EAAM,EAGRA,IACN1B,EAAWC,QAEb,eAEH,kBAAC,EAAD,CACEM,gBAAiBnC,KAAKmC,gBACtBC,mBAAoBpC,KAAKoC,mBACzBF,sBAAuBlC,KAAKkC,sBAC5BG,WAAYA,IAEd,4BACEd,KAAK,SACLrB,UAAU,kBACVmB,QAASrB,KAAKgD,qBAHhB,yB,GAjNQzC,IAAMC,WCCxB+C,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.106d54cd.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass TodoApp extends React.Component {\n  state = {\n    text: '',\n  }\n\n  handleChangeNewTodoText = (event) => {\n    const { value } = event.target;\n\n    this.setState({ text: value });\n  }\n\n  render() {\n    const { handleSubmit } = this.props;\n    const { text } = this.state;\n\n    return (\n      <header className=\"header\">\n        <h1>todos</h1>\n        <form onSubmit={(event) => {\n          handleSubmit(event, text);\n\n          this.setState({ text: '' });\n        }\n        }\n        >\n          <input\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            value={text}\n            onChange={this.handleChangeNewTodoText}\n            onBlur={(event) => {\n              handleSubmit(event, text);\n\n              this.setState({ text: '' });\n            }\n            }\n          />\n        </form>\n      </header>\n    );\n  }\n}\n\nTodoApp.propTypes = {\n  handleSubmit: PropTypes.func.isRequired,\n};\n\nexport default TodoApp;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass TodoItem extends React.Component {\n  state = {};\n\n  render() {\n    const {\n      todo,\n      handleCheckboxChange,\n      handleDoubleClick,\n      handleEditing,\n      handleClickDestroy,\n      handleLossFocus,\n    } = this.props;\n\n    return (\n      <>\n        <div className=\"View\">\n          <input\n            defaultChecked={false}\n            checked={todo.elementState.editing\n              ? !todo.elementState.editing\n              : todo.elementState.completed\n            }\n            onClick={() => handleCheckboxChange(todo.id)}\n            type=\"checkbox\"\n            className=\"toggle\"\n            id={`todo-${todo.id}`}\n          />\n          <label\n            onDoubleClick={() => handleDoubleClick(todo.id)}\n          >\n            {todo.elementState.editing ? '' : todo.text}\n          </label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={() => handleClickDestroy(todo.id)}\n          />\n        </div>\n        <input\n          type=\"text\"\n          className=\"edit\"\n          defaultValue={todo.text}\n          onKeyDown={event => handleEditing(event, todo.id)}\n          onBlur={event => handleLossFocus(event, todo.id)}\n          // ref={}\n        />\n      </>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number,\n    text: PropTypes.string,\n    elementState: PropTypes.shape({\n      completed: PropTypes.bool,\n      editing: PropTypes.bool,\n    }),\n  }).isRequired,\n  handleCheckboxChange: PropTypes.func.isRequired,\n  handleDoubleClick: PropTypes.func.isRequired,\n  handleEditing: PropTypes.func.isRequired,\n  handleClickDestroy: PropTypes.func.isRequired,\n  handleLossFocus: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport TodoItem from '../TodoItem/TodoItem';\n\nclass TodoList extends React.Component {\n  state = { };\n\n  render() {\n    const {\n      ListofTodo,\n      handleCheckboxChange,\n      handleDoubleClick,\n      handleEditing,\n      handleClickDestroy,\n      handleLossFocus,\n    } = this.props;\n\n    return (\n      <ul className=\"todo-list\">\n        {ListofTodo.length !== 0\n          ? ListofTodo.map(todo => (\n            <li\n              className={classNames(todo.elementState)}\n              key={todo ? todo.id : null}\n            >\n              <TodoItem\n                todo={todo}\n                handleCheckboxChange={handleCheckboxChange}\n                handleDoubleClick={handleDoubleClick}\n                handleEditing={handleEditing}\n                handleClickDestroy={handleClickDestroy}\n                handleLossFocus={handleLossFocus}\n              />\n            </li>\n          ))\n          : <div />\n        }\n      </ul>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  ListofTodo: PropTypes.arrayOf(Object).isRequired,\n  handleCheckboxChange: PropTypes.func.isRequired,\n  handleDoubleClick: PropTypes.func.isRequired,\n  handleEditing: PropTypes.func.isRequired,\n  handleClickDestroy: PropTypes.func.isRequired,\n  handleLossFocus: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport cs from 'classnames';\nimport PropTypes from 'prop-types';\n\nclass Nav extends React.Component {\n  state = {};\n\n  render() {\n    const {\n      handleSelectComplited,\n      handleSelectAll,\n      handleSelectActive,\n      activePage,\n    } = this.props;\n\n    return (\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/\"\n            className={cs({ selected: activePage === 'All' })}\n\n            onClick={() => handleSelectAll()}\n          >\n            All\n          </a>\n        </li>\n\n        <li>\n          <a\n            onClick={() => handleSelectActive()}\n            href=\"#/active\"\n            className={cs({ selected: activePage === 'Active' })}\n\n          >\n            Active\n          </a>\n        </li>\n\n        <li>\n          <a\n            onClick={() => handleSelectComplited()}\n            href=\"#/completed\"\n            className={cs({ selected: activePage === 'Completed' })}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n    );\n  }\n}\n\nNav.propTypes = {\n  handleSelectComplited: PropTypes.func.isRequired,\n  handleSelectAll: PropTypes.func.isRequired,\n  handleSelectActive: PropTypes.func.isRequired,\n  activePage: PropTypes.string.isRequired,\n};\n\nexport default Nav;\n","import React from 'react';\nimport TodoApp from './Component/TodoApp/TodoApp';\nimport TodoList from './Component/TodoList/TodoList';\nimport Nav from './Component/Nav/Nav';\n\nclass App extends React.Component {\n  state = {\n    activePage: 'All',\n    id: 0,\n    ListofTodo: [],\n  }\n\n  handleSubmit = (event, newTodoText) => {\n    event.preventDefault();\n\n    if (newTodoText === '') {\n      return;\n    }\n\n    const sample = {\n      id: this.state.id + 1,\n      text: newTodoText,\n      elementState: {\n        completed: false,\n        editing: false,\n      },\n    };\n\n    this.setState(state => ({\n      ListofTodo: state.ListofTodo.concat([{ ...sample }]),\n      id: state.id + 1,\n    }));\n  }\n\n  handleCheckboxChange = (id) => {\n    this.setState(state => ({ ListofTodo: state.ListofTodo.map((todo) => {\n      if (todo.id !== id) {\n        return todo;\n      }\n\n      return {\n        ...todo,\n        elementState: {\n          ...todo.elementState,\n          completed: !todo.elementState.completed,\n        },\n      };\n    }) }));\n  }\n\n  handleClickDestroy = (id) => {\n    this.setState(state => ({ ListofTodo: state.ListofTodo\n      .filter(todo => todo.id !== id) }));\n  }\n\n  handleDoubleClick = (id) => {\n    this.setState(state => ({\n      ListofTodo: state.ListofTodo.map((todo) => {\n        if (todo.id !== id) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          elementState: {\n            ...todo.elementState,\n            editing: true,\n          },\n        };\n      }),\n    }));\n  }\n\n  handleEditing = (event, id) => {\n    const { value } = event.target;\n\n    if (event.key === 'Enter') {\n      this.setState(state => ({ ListofTodo: state.ListofTodo.map((todo) => {\n        if (todo.id !== id) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          text: value,\n          elementState: {\n            ...todo.elementState,\n            editing: false,\n          },\n        };\n      }) }));\n    }\n  }\n\n  handleLossFocus = (event, id) => {\n    const { value } = event.target;\n\n    this.setState(state => ({ ListofTodo: state.ListofTodo.map((todo) => {\n      if (todo.id !== id) {\n        return todo;\n      }\n\n      return {\n        ...todo,\n        text: value,\n        elementState: {\n          ...todo.elementState,\n          editing: false,\n        },\n      };\n    }) }));\n  }\n\n  handleToggleAll = (event) => {\n    const { checked } = event.target;\n\n    if (checked) {\n      this.setState(state => ({ ListofTodo: state.ListofTodo.map(todo => ({\n        ...todo,\n        elementState: {\n          ...todo.elementState,\n          completed: true,\n        },\n      })) }));\n    } else {\n      this.setState(state => ({ ListofTodo: state.ListofTodo.map(todo => ({\n        ...todo,\n        elementState: {\n          ...todo.elementState,\n          completed: false,\n        },\n      })) }));\n    }\n  }\n\n  handleSelectAll = () => {\n    this.setState({ activePage: 'All' });\n  }\n\n  handleSelectActive = () => {\n    this.setState({ activePage: 'Active' });\n  }\n\n  handleSelectComplited = () => {\n    this.setState({ activePage: 'Completed' });\n  }\n\n  hanleClearComplited = () => {\n    this.setState(state => ({ ListofTodo: state.ListofTodo\n      .filter(todo => todo.elementState.completed !== true) }));\n  }\n\n  render() {\n    const { ListofTodo, activePage } = this.state;\n    let visibleList;\n\n    if (activePage === 'All') {\n      visibleList = [...ListofTodo];\n    } else if (activePage === 'Active') {\n      visibleList = [...ListofTodo\n        .filter(todo => todo.elementState.completed === false)];\n    } else {\n      visibleList = [...ListofTodo\n        .filter(todo => todo.elementState.completed === true)];\n    }\n\n    return (\n      <section className=\"todoapp\">\n        <TodoApp\n          handleSubmit={this.handleSubmit}\n        />\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            checked={ListofTodo\n              .every(todo => todo.elementState.completed === true)}\n            onClick={this.handleToggleAll}\n          />\n          <label\n            hidden={ListofTodo.length === 0}\n            htmlFor=\"toggle-all\"\n          >\n            Mark all as complete\n          </label>\n          <TodoList\n            ListofTodo={visibleList}\n            handleCheckboxChange={this.handleCheckboxChange}\n            handleDoubleClick={this.handleDoubleClick}\n            handleEditing={this.handleEditing}\n            handleClickDestroy={this.handleClickDestroy}\n            handleLossFocus={this.handleLossFocus}\n          />\n        </section>\n\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            {ListofTodo.reduce((acc, todo) => {\n              if (todo.elementState.completed) {\n                return acc - 1;\n              }\n\n              return acc;\n            }, ListofTodo.length)\n            }\n            {' items left'}\n          </span>\n          <Nav\n            handleSelectAll={this.handleSelectAll}\n            handleSelectActive={this.handleSelectActive}\n            handleSelectComplited={this.handleSelectComplited}\n            activePage={activePage}\n          />\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={this.hanleClearComplited}\n          >\n            Clear completed\n          </button>\n        </footer>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}