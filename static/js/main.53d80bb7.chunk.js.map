{"version":3,"sources":["Component/TodoApp/TodoApp.js","Component/TodoItem/TodoItem.js","Component/TodoList/TodoList.js","Component/Nav/Nav.js","App.js","index.js"],"names":["TodoApp","state","text","inputFocus","React","createRef","componentDidMount","current","focus","handleChangeNewTodoText","event","value","target","setState","handleSubmit","this","props","className","onSubmit","ref","placeholder","onChange","onBlur","Component","TodoItem","inputText","todo","handleCheckboxChange","handleDoubleClick","handleEditing","handleClickDestroy","handleLossFocus","elementState","editing","checked","completed","id","type","onDoubleClick","onClick","defaultValue","onKeyDown","TodoList","ListofTodo","length","map","classNames","key","Nav","handleSelectComplited","handleSelectAll","handleSelectActive","activePage","href","cs","selected","App","componentDidUpdate","localStorage","setItem","JSON","stringify","newTodoText","preventDefault","replace","sample","trim","concat","filter","input","prevValue","handleToggleAll","hanleClearComplited","getItem","s","parse","visibleList","every","hidden","htmlFor","reduce","acc","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.53d80bb7.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass TodoApp extends React.Component {\n  state = {\n    text: '',\n  }\n\n  inputFocus = React.createRef();\n\n  componentDidMount = () => {\n    this.inputFocus.current.focus();\n  }\n\n  handleChangeNewTodoText = (event) => {\n    const { value } = event.target;\n\n    this.setState({ text: value });\n  }\n\n  render() {\n    const { handleSubmit } = this.props;\n    const { text } = this.state;\n\n    return (\n      <header className=\"header\">\n        <h1>todos</h1>\n        <form onSubmit={(event) => {\n          handleSubmit(event, text);\n          this.setState({ text: '' });\n        }}\n        >\n          <input\n            className=\"new-todo\"\n            ref={this.inputFocus}\n            placeholder=\"What needs to be done?\"\n            value={text}\n            onChange={this.handleChangeNewTodoText}\n            onBlur={(event) => {\n              handleSubmit(event, text);\n              this.setState({ text: '' });\n            }}\n          />\n        </form>\n      </header>\n    );\n  }\n}\n\nTodoApp.propTypes = {\n  handleSubmit: PropTypes.func.isRequired,\n};\n\nexport default TodoApp;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport class TodoItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.inputText = React.createRef();\n  }\n\n  componentDidUpdate() {\n    if (this.inputText.current) {\n      this.inputText.current.focus();\n    }\n  }\n\n  render() {\n    const {\n      todo,\n      handleCheckboxChange,\n      handleDoubleClick,\n      handleEditing,\n      handleClickDestroy,\n      handleLossFocus,\n    } = this.props;\n\n    return (\n      <div>\n        {todo.elementState.editing === false\n          ? (\n            <div className=\"View\">\n              <input\n                checked={todo.elementState.completed}\n                onChange={() => handleCheckboxChange(todo.id)}\n                type=\"checkbox\"\n                className=\"toggle\"\n                id={`todo-${todo.id}`}\n              />\n              <label\n                onDoubleClick={() => {\n                  handleDoubleClick(todo.id);\n                }}\n              >\n                {todo.text}\n              </label>\n              <button\n                type=\"button\"\n                className=\"destroy\"\n                onClick={() => handleClickDestroy(todo.id)}\n              />\n            </div>\n          )\n          : (\n            <input\n              type=\"text\"\n              className=\"edit\"\n              defaultValue={todo.text}\n              onKeyDown={event => handleEditing(event, todo.id, todo.text)}\n              onBlur={event => handleLossFocus(event, todo.id)}\n              ref={this.inputText}\n            />\n          )\n        }\n      </div>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number,\n    text: PropTypes.string,\n    elementState: PropTypes.shape({\n      completed: PropTypes.bool,\n      editing: PropTypes.bool,\n    }),\n  }).isRequired,\n  handleCheckboxChange: PropTypes.func.isRequired,\n  handleDoubleClick: PropTypes.func.isRequired,\n  handleEditing: PropTypes.func.isRequired,\n  handleClickDestroy: PropTypes.func.isRequired,\n  handleLossFocus: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport { TodoItem } from '../TodoItem/TodoItem';\n\nclass TodoList extends React.Component {\n  state = { };\n\n  render() {\n    const {\n      ListofTodo,\n      handleCheckboxChange,\n      handleDoubleClick,\n      handleEditing,\n      handleClickDestroy,\n      handleLossFocus,\n    } = this.props;\n\n    return (\n      <ul className=\"todo-list\">\n        {ListofTodo.length !== 0\n          ? ListofTodo.map(todo => (\n            <li\n              className={classNames(todo.elementState)}\n              key={todo.id}\n            >\n              <TodoItem\n                todo={todo}\n                handleCheckboxChange={handleCheckboxChange}\n                handleDoubleClick={handleDoubleClick}\n                handleEditing={handleEditing}\n                handleClickDestroy={handleClickDestroy}\n                handleLossFocus={handleLossFocus}\n              />\n            </li>\n          ))\n          : <div />\n        }\n      </ul>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  ListofTodo: PropTypes.arrayOf(Object).isRequired,\n  handleCheckboxChange: PropTypes.func.isRequired,\n  handleDoubleClick: PropTypes.func.isRequired,\n  handleEditing: PropTypes.func.isRequired,\n  handleClickDestroy: PropTypes.func.isRequired,\n  handleLossFocus: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport cs from 'classnames';\nimport PropTypes from 'prop-types';\n\nclass Nav extends React.Component {\n  state = {};\n\n  render() {\n    const {\n      handleSelectComplited,\n      handleSelectAll,\n      handleSelectActive,\n      activePage,\n    } = this.props;\n\n    return (\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/\"\n            className={cs({ selected: activePage === 'All' })}\n            onClick={() => handleSelectAll()}\n          >\n            All\n          </a>\n        </li>\n\n        <li>\n          <a\n            onClick={() => handleSelectActive()}\n            href=\"#/active\"\n            className={cs({ selected: activePage === 'Active' })}\n          >\n            Active\n          </a>\n        </li>\n\n        <li>\n          <a\n            onClick={() => handleSelectComplited()}\n            href=\"#/completed\"\n            className={cs({ selected: activePage === 'Completed' })}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n    );\n  }\n}\n\nNav.propTypes = {\n  handleSelectComplited: PropTypes.func.isRequired,\n  handleSelectAll: PropTypes.func.isRequired,\n  handleSelectActive: PropTypes.func.isRequired,\n  activePage: PropTypes.string.isRequired,\n};\n\nexport default Nav;\n","import React from 'react';\nimport TodoApp from './Component/TodoApp/TodoApp';\nimport TodoList from './Component/TodoList/TodoList';\nimport Nav from './Component/Nav/Nav';\n\nclass App extends React.Component {\n  state = {\n    activePage: 'All',\n    id: 0,\n    ListofTodo: [],\n  }\n\n  componentDidMount() {\n    if (localStorage.getItem('list') !== null) {\n      const s = JSON.parse(localStorage.getItem('list'));\n\n      this.setState(s);\n    }\n  }\n\n  componentDidUpdate = () => {\n    localStorage.setItem('list', JSON.stringify(this.state));\n  }\n\n  handleSubmit = (event, newTodoText) => {\n    event.preventDefault();\n\n    if (newTodoText.replace(/ /g, '') === '') {\n      return;\n    }\n\n    const sample = {\n      id: this.state.id + 1,\n      text: newTodoText.trim(),\n      elementState: {\n        completed: false,\n        editing: false,\n      },\n    };\n\n    this.setState(state => ({\n      ListofTodo: state.ListofTodo.concat([{ ...sample }]),\n      id: state.id + 1,\n    }));\n  }\n\n  handleCheckboxChange = (id) => {\n    this.setState(state => ({ ListofTodo: state.ListofTodo.map((todo) => {\n      if (todo.id !== id) {\n        return todo;\n      }\n\n      return {\n        ...todo,\n        elementState: {\n          ...todo.elementState,\n          completed: !todo.elementState.completed,\n        },\n      };\n    }) }));\n  }\n\n  handleClickDestroy = (id) => {\n    this.setState(state => ({ ListofTodo: state.ListofTodo\n      .filter(todo => todo.id !== id) }));\n  }\n\n  handleDoubleClick = (id, input) => {\n    this.setState(state => ({\n      ListofTodo: state.ListofTodo.map((todo) => {\n        if (todo.id !== id) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          elementState: {\n            ...todo.elementState,\n            editing: true,\n          },\n        };\n      }),\n    }));\n  }\n\n  handleEditing = (event, id, prevValue) => {\n    const { value } = event.target;\n\n    if (event.key === 'Enter') {\n      this.setState(state => ({ ListofTodo: state.ListofTodo.map((todo) => {\n        if (todo.id !== id) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          text: value,\n          elementState: {\n            ...todo.elementState,\n            editing: false,\n          },\n        };\n      }) }));\n    }\n\n    if (event.key === 'Escape') {\n      this.setState(state => ({ ListofTodo: state.ListofTodo.map((todo) => {\n        if (todo.id !== id) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          text: prevValue,\n          elementState: {\n            ...todo.elementState,\n            editing: false,\n          },\n        };\n      }) }));\n    }\n  }\n\n  handleLossFocus = (event, id) => {\n    const { value } = event.target;\n\n    this.setState(state => ({ ListofTodo: state.ListofTodo.map((todo) => {\n      if (todo.id !== id) {\n        return todo;\n      }\n\n      return {\n        ...todo,\n        text: value,\n        elementState: {\n          ...todo.elementState,\n          editing: false,\n        },\n      };\n    }) }));\n  }\n\n  handleToggleAll = (event) => {\n    const { checked } = event.target;\n\n    if (checked) {\n      this.setState(state => ({ ListofTodo: state.ListofTodo.map(todo => ({\n        ...todo,\n        elementState: {\n          ...todo.elementState,\n          completed: true,\n        },\n      })) }));\n    } else {\n      this.setState(state => ({ ListofTodo: state.ListofTodo.map(todo => ({\n        ...todo,\n        elementState: {\n          ...todo.elementState,\n          completed: false,\n        },\n      })) }));\n    }\n  }\n\n  handleSelectAll = () => {\n    this.setState({ activePage: 'All' });\n  }\n\n  handleSelectActive = () => {\n    this.setState({ activePage: 'Active' });\n  }\n\n  handleSelectComplited = () => {\n    this.setState({ activePage: 'Completed' });\n  }\n\n  hanleClearComplited = () => {\n    this.setState(state => ({ ListofTodo: state.ListofTodo\n      .filter(todo => todo.elementState.completed !== true) }));\n  }\n\n  render() {\n    const { ListofTodo, activePage } = this.state;\n    let visibleList;\n\n    if (activePage === 'All') {\n      visibleList = [...ListofTodo];\n    } else if (activePage === 'Active') {\n      visibleList = [...ListofTodo\n        .filter(todo => todo.elementState.completed === false)];\n    } else {\n      visibleList = [...ListofTodo\n        .filter(todo => todo.elementState.completed === true)];\n    }\n\n    return (\n      <section className=\"todoapp\">\n        <TodoApp\n          handleSubmit={this.handleSubmit}\n        />\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            checked={ListofTodo\n              .every(todo => todo.elementState.completed === true)}\n            onChange={this.handleToggleAll}\n          />\n          <label\n            hidden={ListofTodo.length === 0}\n            htmlFor=\"toggle-all\"\n          >\n            Mark all as complete\n          </label>\n          <TodoList\n            ListofTodo={visibleList}\n            handleCheckboxChange={this.handleCheckboxChange}\n            handleDoubleClick={this.handleDoubleClick}\n            handleEditing={this.handleEditing}\n            handleClickDestroy={this.handleClickDestroy}\n            handleLossFocus={this.handleLossFocus}\n          />\n        </section>\n\n        <footer hidden={ListofTodo.length === 0} className=\"footer\">\n          <span className=\"todo-count\">\n            {ListofTodo.reduce((acc, todo) => {\n              if (todo.elementState.completed) {\n                return acc - 1;\n              }\n\n              return acc;\n            }, ListofTodo.length)\n            }\n            {' items left'}\n          </span>\n          <Nav\n            handleSelectAll={this.handleSelectAll}\n            handleSelectActive={this.handleSelectActive}\n            handleSelectComplited={this.handleSelectComplited}\n            activePage={activePage}\n          />\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={this.hanleClearComplited}\n          >\n            Clear completed\n          </button>\n        </footer>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}